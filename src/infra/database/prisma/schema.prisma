generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model Source {
  code String @id
  name String
  avatarUrl String?
  news News[]
}

model News {
  link String @id
  title String
  description String?
  sourceCode String
  source Source @relation(fields: [sourceCode], references: [code])
  imageUrl String?
  content String @db.Text
  createdAt DateTime @default(now())
  categories NewsCategory[]
  batches ProcessBatch[]
}

model Profile {
  id String @id @default(uuid())
  name String @unique
  categories ProfileCategory[]
  userId String
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model ProfileCategory {  
  profile Profile @relation(fields: [profileId], references: [id])
  profileId String
  category String
  @@unique([profileId,  category])
}

model NewsCategory {
  news News @relation(fields: [newsLink], references: [link])
  newsLink String
  category String
  related Boolean @default(false)
  processed Boolean @default(false)
  batchId String?
  batch ProcessBatch? @relation(fields: [batchId], references: [id])
  @@unique([newsLink, category])
}

model ProcessBatch {
  id String @id @default(uuid())
  request Json?
  response Json?
  error Json?
  createdAt DateTime @default(now())
  newsLink String
  news News @relation(fields: [newsLink], references: [link])
  categories NewsCategory[]
}

enum userRole {
  admin
  user
}

model User {
  id String @id @default(uuid())
  email String @unique
  password UserPassword?
  profiles Profile[]
  role userRole @default(user)
}

model UserPassword {
  userId String @id
  user User @relation(fields: [userId], references: [id])
  hash String
}
