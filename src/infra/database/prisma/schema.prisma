generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model Source {
  code String @id @db.VarChar(32)
  name String @db.VarChar(32)
  avatarUrl String?
  news News[]
}

model News {
  link String @id
  title String
  description String?
  sourceCode String @db.VarChar(32)
  source Source @relation(fields: [sourceCode], references: [code])
  imageUrl String?
  content String @db.Text
  createdAt DateTime @default(now())
  embeddings NewsEmbedding[]
  @@index([createdAt])
}

model NewsEmbedding {
  link String
  newsSectionIndex Int
  embedding Unsupported("vector(1536)")
  news News @relation(fields: [link], references: [link])
  @@id([link, newsSectionIndex])
}

model Profile {
  id String @id @default(uuid()) @db.VarChar(36)
  name String @db.VarChar(32)
  categories String[] @db.VarChar(32) 
  userId String @db.VarChar(36)
  user User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  @@unique([userId, name])
}

model CategoryEmbedding {
  text String @db.VarChar(32) @id
  embedding Unsupported("vector(1536)")
}

enum userRole {
  admin
  user
}

model User {
  id String @id @default(uuid()) @db.VarChar(36)
  email String @unique
  password UserPassword?
  profiles Profile[]
  resetPasswordTokens ResetPasswordToken[]
  role userRole @default(user)
  @@index([email])
}

model UserPassword {
  userId String @id @db.VarChar(36)
  user User @relation(fields: [userId], references: [id])
  hash String @db.VarChar(64)
}

model ResetPasswordToken {
  token String @id @default(uuid()) @db.VarChar(36)
  email String @db.VarChar(36)
  user User @relation(fields: [email], references: [email])
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("NOW() + INTERVAL '1 day'"))
}